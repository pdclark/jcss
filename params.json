{"name":"JCSS","tagline":"Handy CSS Generation using Javascript","body":"Now you can use Javascript for CSS declaration, and all its power at your fingertips!\r\n\r\nYou have no need to remember a lot of rules. JCSS uses the simple hierarchical declaration as the most of popular CSS-preprocessors (like LESS, Stylus, Sass), but using of advanced features like mixins will be as easier as you know Javascript. And I hope you know it well.\r\n\r\nKnowledge of the CoffeeScript can rise the usability of this library up to the new level! Because it's much more simple language for declarations, you know. In spite of this, all documentation wrote by Javascript.\r\n\r\n## Warning\r\n\r\nI should warn you that using of this library is not necessary in most of the cases. I recommend you to use any other modern css-framework (that based on CSS instead of JS).\r\nProbably you could find some situations (as I did) where JCSS shows itself. Anyway, use it with caution.\r\n\r\n## Getting started\r\nInstall via NPM...\r\n\r\n```\r\n$ npm install jcss\r\n```\r\n\r\n... or add script to your web page.\r\n\r\n```html\r\n<script type=\"text/javascript\" src=\"/path/to/jcss.js\"></script>\r\n```\r\n\r\n... or install script via bower and add via requirejs.\r\n\r\n```bash\r\nbower install git://github.com/tenphi/jcss.git\r\n```\r\n\r\n```javascript\r\nrequire(['./components/jcss/jcss'], function(jcss) {\r\n  jml.inject(/* name */, /* object of styles */);\r\n});\r\n```\r\n\r\n## Simple rules, great opportunities\r\nLet's try to learn more about JCSS. We can start with simplest example:\r\n\r\n```javascript\r\njcss.render({\r\n    '.class': {\r\n        color: 'black'\r\n    }\r\n});\r\n```\r\n\r\n```css\r\n.class {\r\n    color: black;\r\n}\r\n```\r\n\r\nYou could think that there are no benefits of using JCSS. But hold on, its just a beginning! Magic awaits us!\r\n\r\n```javascript\r\n// left join\r\njcss.render({\r\n    '.class1': {\r\n        color: 'red',\r\n        '.class2': { // '& .class' works as well if you like it\r\n            color: 'black'\r\n        }\r\n    }\r\n});\r\n\r\n// right join\r\njcss.render({\r\n    '.class1': {\r\n        color: 'red',\r\n        '.class2 &': {\r\n            color: 'black'\r\n        }\r\n    }\r\n});\r\n```\r\n\r\n```css\r\n/* left join */\r\n.class1 {\r\n    color: red;\r\n}\r\n\r\n.class1 .class2 {\r\n    color: black;\r\n}\r\n\r\n/* right join */\r\n.class1 {\r\n    color: red;\r\n}\r\n\r\n.class2 .class1 {\r\n    color: black;\r\n}\r\n```\r\n\r\nIt's simple rules for joining selectors for flexible declaration.\r\nBut what should we do if we want to create a several values for single style. We can use arrays! Here is an another simple example:\r\n\r\n```javascript\r\njcss.render({\r\n    '.class1': {\r\n        background: [\r\n            'url(bg1.png), url(bg2.png)', // if browser supports multiple backgrounds\r\n            'url(bg.png)' // single background for other browsers\r\n        ]\r\n    }\r\n});\r\n```\r\n\r\n```css\r\n.class1 {\r\n    background: url(bg1.png), url(bg2.png);\r\n    background: url(bg.png);\r\n}\r\n```\r\n\r\nNow, Let's try to broke up the library with some complex example. Also, we will see how separation of selectors works.\r\n\r\n```javascript\r\njcss.render({\r\n    '.class1, .class2': {\r\n        '.class3, .class4': { // Also, as for clarity, we can use this notation - ' .class3| .class4'\r\n            color: 'black',\r\n            background: 'transparent'\r\n        }\r\n    },\r\n    '.class2 .class3': {\r\n        background: 'blue'\r\n    }\r\n});\r\n```\r\n\r\n```css\r\n.class1 .class3 {\r\n    color: black;\r\n    background: transparent;\r\n}\r\n\r\n.class1 .class4 {\r\n    color: black;\r\n    background: transparent;\r\n}\r\n\r\n.class2 .class3 {\r\n    color: black;\r\n    background: blue;\r\n}\r\n\r\n.class2 .class4 {\r\n    color: black;\r\n    background: transparent;\r\n}\r\n```\r\n\r\nWell, it's not what we except. It's because JCSS not an optimizer yet. For optimization I recommend libraries like CSSO. JCSS just makes fast code, not small, because redefinitions of styles work in generation step, not in product. It makes your CSS really fast! And you have no need of thinking about are there too much overrides or not.\r\n\r\n## Mixins\r\n\r\nAs many CSS-preprocessors JCSS have mixins as well. But JCSS's mixins are Javascript functions. And it's really cool. Why? Take a look:\r\n\r\n```javascript\r\njcss.mixins['borderRadius'] = function(val) {\r\n    return {\r\n        WebkitBorderRadius: val,\r\n        MozBorderRadius: val,\r\n        borderRadius: val\r\n    };\r\n};\r\njcss.render({\r\n    '.class': {\r\n        borderRadius: '5px'\r\n    }\r\n});\r\n```\r\n\r\n```css\r\n.class {\r\n    -webkit-border-radius: 5px;\r\n    -moz-border-radius: 5px;\r\n    border-radius: 5px;\r\n}\r\n```\r\n\r\nWow! Mixins are great, aren't they?\r\n\r\n## Variables & More\r\n\r\nJavascript provides you many opportunities of generating CSS which are limited only by your imagination. DO WHAT YOU WANT!\r\n\r\n```javascript\r\nvar width = '100px';\r\njcss.render(function() {\r\n    var out = {};\r\n    for (var i = 1; i < 10; i++) {\r\n        out['.class' + i] = {\r\n            width: width\r\n        };\r\n    }\r\n    return out;\r\n}());\r\n```\r\n\r\nYou already know what output should be here :)\r\n\r\n## Extras\r\n\r\nDon't forget about @-rules. You can use it too, but more flexible. Here is some examples:\r\n\r\n### @media and @supports\r\n\r\n```javascript\r\njcss.render({\r\n    '@media (max-width=980)': {\r\n        '.class1': {\r\n            style1: 'red',\r\n            '& .class2': {\r\n                style2: 'blue'\r\n            }\r\n        }\r\n    },\r\n    '.class1': {\r\n        '@media (max-width=980)': {\r\n            style1: 'blue',\r\n            '& .class2': {\r\n                style2: 'red'\r\n            }\r\n        }\r\n    }\r\n});\r\n```\r\n\r\n```css\r\n@media (max-width=980) {\r\n\r\n    .class1 {\r\n        style1: blue;\r\n    }\r\n\r\n    .class1 .class2{\r\n        style2: red;\r\n    }\r\n\r\n}\r\n```\r\n\r\nIsn't this cool? JCSS overrided the rules.\r\n\r\n### @font-face and @page\r\n\r\n```javascript\r\njcss.render({\r\n    '@font-face': {\r\n        fontFamily: 'FontName',\r\n        src: 'url(\"fontname.otf\")'\r\n    },\r\n    '@page :first': {\r\n        margin: '1cm'\r\n    }\r\n});\r\n```\r\n\r\n```css\r\n@font-face {\r\n  font-family: FontName;\r\n  src: url(\"fontname.otf\");\r\n}\r\n\r\n@page :first {\r\n  margin: 1cm;\r\n}\r\n```\r\n\r\n### @import and @charset\r\n\r\n```javascript\r\njcss.render({\r\n    '@charset': '\"windows-1251\"',\r\n    '@import': '\"another.css\" all'\r\n});\r\n```\r\n\r\n```css\r\n@charset \"windows-1251\";\r\n\r\n@import \"another.css\" all;\r\n```\r\n\r\nYep! Not so cool. But we can live with that because it is very rare use case.\r\n\r\n## Custom Objects as style value\r\n\r\nFor example, if you have a super color library you may want to use it with JCSS. No problem!\r\n\r\n```javascript\r\nvar color = new Color('red').lighten(20); // a lighter shade of red\r\njcss.render({\r\n    '.class': {\r\n        color: color // <- it's our Object! it will transform into string!\r\n    }\r\n});\r\n```\r\n\r\nIf Color prototype have `toString()` method it would use for getting value of style.\r\n\r\n## That's all, folks! :)\r\n\r\n## License\r\n\r\n(The MIT License)\r\n\r\nCopyright (c) 20011-2013 Andrey Yamanov <tenphi@gmail.com>\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n'Software'), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n","google":"var _gaq = _gaq || [];   _gaq.push(['_setAccount', 'UA-10996362-3']);   _gaq.push(['_trackPageview']);    (function() {     var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;     ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';     var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);   })();","note":"Don't delete this file! It's used internally to help with page regeneration."}